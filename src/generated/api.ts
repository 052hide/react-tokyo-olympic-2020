/* tslint:disable */
/* eslint-disable */
/**
 * React Tokyo Olympic 2020
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface MedalCountCountry
 */
export interface MedalCountCountry {
  /**
   *
   * @type {number}
   * @memberof MedalCountCountry
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof MedalCountCountry
   */
  country_alpha_2_code: string
  /**
   *
   * @type {number}
   * @memberof MedalCountCountry
   */
  gold_count: number
  /**
   *
   * @type {number}
   * @memberof MedalCountCountry
   */
  silver_count: number
  /**
   *
   * @type {number}
   * @memberof MedalCountCountry
   */
  bronze_count: number
}
/**
 *
 * @export
 * @enum {string}
 */

export enum MedalType {
  gold = 1,
  silver = 2,
  bronze = 3,
}

/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {number}
   * @memberof ModelError
   */
  code: number
  /**
   *
   * @type {string}
   * @memberof ModelError
   */
  message: string
}
/**
 *
 * @export
 * @interface PageInfo
 */
export interface PageInfo {
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  per_page: number
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  page_number: number
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  total_page_count: number
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  total_count: number
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  first_cursor_id: number
  /**
   *
   * @type {number}
   * @memberof PageInfo
   */
  last_cursor_id: number
  /**
   *
   * @type {boolean}
   * @memberof PageInfo
   */
  has_previous_page: boolean
  /**
   *
   * @type {boolean}
   * @memberof PageInfo
   */
  has_next_page: boolean
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    medalCountCountries: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/medal_count_countries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async medalCountCountries(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MedalCountCountry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.medalCountCountries(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    medalCountCountries(options?: any): AxiosPromise<Array<MedalCountCountry>> {
      return localVarFp
        .medalCountCountries(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public medalCountCountries(options?: any) {
    return DefaultApiFp(this.configuration)
      .medalCountCountries(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
